# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : recognizer.sm

import statemap


class RecognizerState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def next(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class MainMap_Default(RecognizerState):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.finish()
        finally:
            fsm.setState(MainMap.no_match)
            fsm.getState().Entry(fsm)


class MainMap_class_kw(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.match_and_consume("class") and ctxt.peek().isspace()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_class)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_post_class(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isspace()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_class)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek().isidentifier()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.save_position()
            finally:
                fsm.setState(MainMap.class_name)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_class_name(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isdigit() or ctxt.peek().isidentifier()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.class_name)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek().isspace()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.save_position()
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_class_name_spaces)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek() == ":"  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.save_position()
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_colon_space)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_post_class_name_spaces(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isspace()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_class_name_spaces)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek() == ":"  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_colon_space)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_post_colon_space(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isspace()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_colon)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_post_colon(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isspace()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_colon)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek().isidentifier()  :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.parent_pair)
            fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_parent_pair(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.match("private") and ctxt.peek(7).isspace() and ctxt.peek(8).isidentifier()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume(8)
                ctxt.save_position()
            finally:
                fsm.setState(MainMap.parent_name)
                fsm.getState().Entry(fsm)
        elif  ctxt.match("protected") and ctxt.peek(9).isspace() and ctxt.peek(10).isidentifier()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume(10)
                ctxt.save_position()
            finally:
                fsm.setState(MainMap.parent_name)
                fsm.getState().Entry(fsm)
        elif  ctxt.match("public") and ctxt.peek(6).isspace() and ctxt.peek(7).isidentifier()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume(7)
                ctxt.save_position()
            finally:
                fsm.setState(MainMap.parent_name)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek().isidentifier()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.save_position()
            finally:
                fsm.setState(MainMap.parent_name)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_parent_name(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isdigit() or ctxt.peek().isidentifier()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.parent_name)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek().isspace()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.save_position()
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_parent_name_spaces)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek() == ","  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.save_position()
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_comma)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_post_parent_name_spaces(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isspace()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_parent_name_spaces)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek() == ","  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_comma)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek() == "{"  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.curlies)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_post_comma(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isspace()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_comma)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek().isidentifier()  :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.parent_pair)
            fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_curlies(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek() == "}"  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.post_curlies)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_post_curlies(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek() == ";"  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(MainMap.end)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_end(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek() == ""  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.finish()
            finally:
                fsm.setState(MainMap.match)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.next(self, fsm)
        
class MainMap_no_match(MainMap_Default):
    pass

class MainMap_match(MainMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.finish()
        finally:
            fsm.setState(MainMap.match)
            fsm.getState().Entry(fsm)


class MainMap(object):

    class_kw = MainMap_class_kw('MainMap.class_kw', 0)
    post_class = MainMap_post_class('MainMap.post_class', 1)
    class_name = MainMap_class_name('MainMap.class_name', 2)
    post_class_name_spaces = MainMap_post_class_name_spaces('MainMap.post_class_name_spaces', 3)
    post_colon_space = MainMap_post_colon_space('MainMap.post_colon_space', 4)
    post_colon = MainMap_post_colon('MainMap.post_colon', 5)
    parent_pair = MainMap_parent_pair('MainMap.parent_pair', 6)
    parent_name = MainMap_parent_name('MainMap.parent_name', 7)
    post_parent_name_spaces = MainMap_post_parent_name_spaces('MainMap.post_parent_name_spaces', 8)
    post_comma = MainMap_post_comma('MainMap.post_comma', 9)
    curlies = MainMap_curlies('MainMap.curlies', 10)
    post_curlies = MainMap_post_curlies('MainMap.post_curlies', 11)
    end = MainMap_end('MainMap.end', 12)
    no_match = MainMap_no_match('MainMap.no_match', 13)
    match = MainMap_match('MainMap.match', 14)
    Default = MainMap_Default('MainMap.Default', -1)

class Recognizer_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, MainMap.class_kw)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
